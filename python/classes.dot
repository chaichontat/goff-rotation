digraph "classes" {
rankdir=BT
charset="utf-8"
"pyseq2.com.eventloop.AsyncioEventLoopThread" [color="black", fontcolor="black", label="{AsyncioEventLoopThread|loop : NoneType\l|join(timeout: Optional[float]): \lput(coro: Awaitable[T]): Future[T]\lstop()\l}", shape="record", style="solid"];
"pyseq2.experiment.Autofocus" [color="black", fontcolor="black", label="{Autofocus|op : Literal['autofocus']\l|}", shape="record", style="solid"];
"pyseq2.com.async_com.COM" [color="black", fontcolor="black", label="{COM|big_lock : Lock\lformatter\lmin_spacing : Annotated[int | float, 's']\lname\lno_check : bool\lsep : bytes\lt_lastcmd\l|ainit(cls: SerialInstruments, name: str, port_tx: Optional[str], port_rx)\lsend(cmd: str): \lwait(): \l}", shape="record", style="solid"];
"pyseq2.imaging.camera.dcam.Cameras" [color="black", fontcolor="black", label="{Cameras|BUNDLE_HEIGHT : int\lIMG_WIDTH : int\lmode\lproperties\lproperties : TwoProps[str, float]\l|acapture(n_bundles: int, height: int, start_attach: Callable[[], Any], fut_capture: Awaitable[Any], mode: Literal['TDI', 'FOCUS_SWEEP'], cam: Literal[0, 1, 2]): UInt16Array\lainit(cls): Cameras\lcapture(n_bundles: int, fut_capture: Callable[[], Future[Any]], height: int, start_attach: Callable[[], Any], mode: Literal['TDI', 'FOCUS_SWEEP'], cam: Literal[0, 1, 2]): UInt16Array\linitialize(): \ln_frames_taken(cam: Cam): int\lset_mode(m: Literal['TDI', 'FOCUS_SWEEP']): \l}", shape="record", style="solid"];
"pyseq2.com.async_com.Channel" [color="black", fontcolor="black", label="{Channel|reader : StreamReader\lwriter : StreamWriter\l|}", shape="record", style="solid"];
"pyseq2.imaging.camera.dcam_api.CheckedDCAMAPI" [color="black", fontcolor="black", label="{CheckedDCAMAPI|\l|}", shape="record", style="solid"];
"pyseq2.com.async_com.CmdParse" [color="black", fontcolor="black", label="{CmdParse|cmd\ldelayed_parser\ln_lines : int\lparser\l|}", shape="record", style="solid"];
"pyseq2.imaging.camera.dcam_api.DCAMAPI" [color="black", fontcolor="black", label="{DCAMAPI|\l|}", shape="record", style="solid"];
"pyseq2.imaging.camera.dcam_props.DCAMDict" [color="black", fontcolor="black", label="{DCAMDict|handle : c_void_p\l|from_dcam(cls: Handle, h): DCAMDict\lrefresh(): \lretrieve_dcam(h): dict[Props, DCAMProperty]\lto_snake_case(s): str\l}", shape="record", style="solid"];
"pyseq2.imaging.camera.dcam_api.DCAMException" [color="black", fontcolor="red", label="{DCAMException|\l|}", shape="record", style="solid"];
"pyseq2.imaging.camera.dcam_types.DCAMParamPropertyAttr" [color="black", fontcolor="black", label="{DCAMParamPropertyAttr|attribute : int\lattribute2 : int\lcbSize : int\liGroup : int\liProp : int\liPropStep_Element : int\liProp_ArrayBase : int\liProp_NumberOfElement : int\liReserved1 : int\liReserved3 : int\liUnit : int\lnMaxChannel : int\lnMaxView : int\loption : int\ltype_\lvaluedefault : float\lvaluemax : float\lvaluemin : float\lvaluestep : float\l|}", shape="record", style="solid"];
"pyseq2.imaging.camera.dcam_props.DCAMProperty" [color="black", fontcolor="black", label="{DCAMProperty|attr\lid_\lmode_key\lname : Literal\ltype_\lvalue : float\l|from_dcam(cls: Handle, h: Props, name: c_int32, id_)\lget_attr_val(h: c_int32, id_): tuple[DCAMParamPropertyAttr, float]\lrefresh(handle: Handle)\l}", shape="record", style="solid"];
"pyseq2.imaging.camera.dcam_api.DCAMReturnedZero" [color="black", fontcolor="red", label="{DCAMReturnedZero|\l|}", shape="record", style="solid"];
"pyseq2.imaging.camera.dcam_api.DCAM_CAPTURE_MODE" [color="black", fontcolor="black", label="{DCAM_CAPTURE_MODE|name\l|}", shape="record", style="solid"];
"pyseq2.imaging.camera.dcam_types.DCAM_PARAM_PROPERTYATTR" [color="black", fontcolor="black", label="{DCAM_PARAM_PROPERTYATTR|cbSize\liProp : c_int32\l|from_id(cls: c_int32, id_): DCAM_PARAM_PROPERTYATTR\lto_dataclass(): DCAMParamPropertyAttr\l}", shape="record", style="solid"];
"pyseq2.imaging.camera.dcam_types.DCAM_PARAM_PROPERTYVALUETEXT" [color="black", fontcolor="black", label="{DCAM_PARAM_PROPERTYVALUETEXT|c_buf\lcbSize : c_int32\liProp : c_int32\ltext : c_char_p\ltextbytes : c_int32\lvalue : c_double\l|}", shape="record", style="solid"];
"pyseq2.experiment.Experiment" [color="black", fontcolor="black", label="{Experiment|flowcell : Literal[0, 1]\lname : str\lops : Sequence[Command]\lreagents : Optional[dict[str, Reagent]]\l|check_reagents(cls: dict[str, Any], values): dict[str, Any]\ldict()\lfc_check(cls: int, fc)\l}", shape="record", style="solid"];
"pyseq2.imaging.fpga.FPGA" [color="black", fontcolor="black", label="{FPGA|com\lled\loptics\ltdi\lz_obj\lz_tilt\l|ainit(cls: str, port_tx: str, port_rx): FPGA\linitialize(): \linitialize_all(): \lreset(): bool\l}", shape="record", style="solid"];
"pyseq2.imaging.fpga.FPGACmd" [color="black", fontcolor="black", label="{FPGACmd|RESET\l|}", shape="record", style="solid"];
"pyseq2.base.instruments.FPGAControlled" [color="black", fontcolor="black", label="{FPGAControlled|com\lcom\l|}", shape="record", style="solid"];
"pyseq2.imaging.camera.fake_dcam.FakeAPI" [color="black", fontcolor="black", label="{FakeAPI|arr : ndarray\lfc : int\lready : int\ltm : int\l|dcam_allocframe(h: Handle, framecount: c_int32): bool\ldcam_attachbuffer(h: Handle, frames: Array[c_void_p], size: c_uint32): bool\ldcam_capture(h: Handle): bool\ldcam_extended(h: Handle, iCmd: c_uint32, param: c_void_p, size: pointer[c_uint32]): bool\ldcam_firetrigger(h: Handle): bool\ldcam_freeframe(h: Handle): bool\ldcam_getbinning(h: Handle, pBinning: pointer[c_int32]): bool\ldcam_getdataframebytes(h: Handle, pSize: pointer[c_int32]): bool\ldcam_getdatarange(h: Handle, pMax: pointer[c_int32], pMin: pointer[c_int32]): bool\ldcam_getexposuretime(h: Handle, pSec: pointer[c_double]): bool\ldcam_getframecount(h: Handle, pFrame: pointer[c_int32]): bool\ldcam_getnextpropertyid(h: Handle, pProp: pointer[c_int32], option: c_int32): bool\ldcam_getpropertyattr(h: Handle, param: pointer[DCAM_PARAM_PROPERTYATTR]): bool\ldcam_getpropertyname(h: Handle, iProp: c_int32, text: Array[c_char], textbytes: c_int32): bool\ldcam_getpropertyvalue(h: Handle, iProp: c_int32, pValue: pointer[c_double]): bool\ldcam_getpropertyvaluetext(h: Handle, param: pointer[DCAM_PARAM_PROPERTYVALUETEXT]): bool\ldcam_getstatus(h: Handle, pStatus: pointer[c_int32]): bool\ldcam_gettransferinfo(h: Handle, pNewestFrameIndex: pointer[c_int32], pFrameCount: pointer[c_int32]): bool\ldcam_gettriggermode(h: Handle, pMode: pointer[c_int32]): bool\ldcam_gettriggerpolarity(h: Handle, pPolarity: pointer[c_int32]): bool\ldcam_idle(h: Handle): bool\ldcam_init(reserved1: c_void_p, pCount: pointer[c_int32], option: c_char_p): bool\ldcam_lockbits(h: Handle, pTop: pointer[c_ubyte], pRowbytes: pointer[c_int32], frame: c_int32): bool\ldcam_lockdata(h: Handle, pTop: pointer[c_void_p], pRowbytes: pointer[c_int32], frame: c_int32): bool\ldcam_open(h: pointer[Handle], index: c_int32, reserved: Optional[pointer[Any]]): bool\ldcam_precapture(h: Handle, mode: c_int32): bool\ldcam_querypropertyvalue(h: Handle, iProp: c_int32, pValue: pointer[c_double], option: c_int32): bool\ldcam_queryupdate(h: Handle, pFlag: pointer[c_int32], reserved: pointer[c_int32]): bool\ldcam_releasebuffer(h: Handle): bool\ldcam_setbinning(h: Handle, binning: c_int32): bool\ldcam_setbitsinputlutrange(h: Handle, inMax: c_int32, inMin: c_int32): bool\ldcam_setbitsoutputlutrange(h: Handle, outMax: c_ubyte, outMin: c_int32): bool\ldcam_setexposuretime(h: Handle, sec: c_double): bool\ldcam_setgetpropertyvalue(h: Handle, iProp: c_int32, pValue: pointer[c_double], option: c_int32): bool\ldcam_setpropertyvalue(h: Handle, iProp: c_int32, fValue: c_double): bool\ldcam_settriggermode(h: Handle, mode: c_int32): bool\ldcam_settriggerpolarity(h: Handle, polarity: c_int32): bool\ldcam_unlockbits(h: Handle): bool\ldcam_unlockdata(h: Handle): bool\ldcam_wait(h: Handle, pCode: pointer[c_int32], timeout: c_uint32, abortsignal: Handle): bool\lreturn_false()\l}", shape="record", style="solid"];
"pyseq2.com.fakeserial.FakeSerial" [color="black", fontcolor="black", label="{FakeSerial|name\lport_rx : Optional[str]\lport_tx : str\ltimeout : Optional[int | float]\l|flush(): \lreadline(fail: bool): str\lreadlines(fail: bool): str\lwrite(s: str): \l}", shape="record", style="solid"];
"pyseq2.flowcell.FlowCells" [color="black", fontcolor="black", label="{FlowCells|fcs : tuple[_FlowCell, _FlowCell], tuple\l|ainit(cls: dict[SerialPorts, str], ports): FlowCells\linitialize(): \l}", shape="record", style="solid"];
"pyseq2.imaging.ystage.Gains" [color="black", fontcolor="black", label="{Gains|GF : int\lGI : int\lGP : int\lGV : float\l|}", shape="record", style="solid"];
"pyseq2.experiment.Image" [color="black", fontcolor="black", label="{Image|autofocus : bool\lchannels : frozenset[Literal[0, 1, 2, 3]]\llasers : tuple[int, int]\lop : Literal['image']\lxy_end : tuple[float, float]\lxy_start : tuple[float, float]\lz_tilt : int\l|}", shape="record", style="solid"];
"pyseq2.imager.Imager" [color="black", fontcolor="black", label="{Imager|UM_PER_PX : float\lcams\lfpga\llasers\llock : Lock\loptics\lpos\ltdi\lx\ly\lz_obj\lz_tilt\l|ainit(cls: dict[SerialPorts, str], ports: bool, init_cam): Imager\lautofocus(channel: Literal[0, 1, 2, 3]): tuple[int, UInt16Array]\lcalc_delta_pos(n_px_y): int\linitialize(): \ltake(n_bundles: int, dark: bool, channels: frozenset[Literal[0, 1, 2, 3]]): UInt16Array\lwait_ready(): \l}", shape="record", style="solid"];
"pyseq2.utils.utils.InvalidResponse" [color="black", fontcolor="red", label="{InvalidResponse|\l|}", shape="record", style="solid"];
"pyseq2.imaging.fpga.led.LED" [color="black", fontcolor="black", label="{LED|cmd\lcolors\l|}", shape="record", style="solid"];
"pyseq2.imaging.fpga.led.LEDCmd" [color="black", fontcolor="black", label="{LEDCmd|SET_MODE\lSET_PULSE_RATE\lSET_SWEEP_RATE\l|}", shape="record", style="solid"];
"pyseq2.imaging.fpga.led.LEDColor" [color="black", fontcolor="black", label="{LEDColor|name\l|}", shape="record", style="solid"];
"pyseq2.imaging.laser.Laser" [color="black", fontcolor="black", label="{Laser|cmd\lcom\lpower\lstatus\l|ainit(cls: Literal['r', 'g'], name: str, port_tx): Laser\linitialize(): \loff(): \lon(): \lset_onoff(state: bool, attempts: int): \lset_power(power: Annotated[int, 'mW'], tol: Annotated[int, 'mW']): \l}", shape="record", style="solid"];
"pyseq2.imaging.laser.LaserCmd" [color="black", fontcolor="black", label="{LaserCmd|GET_POWER\lGET_STATUS\lOFF : str\lON : str\lSET_POWER : NoneType\lVERSION\l|v_get_power(resp): int\lv_get_status(resp): bool\l}", shape="record", style="solid"];
"pyseq2.imaging.laser.LaserException" [color="black", fontcolor="red", label="{LaserException|\l|}", shape="record", style="solid"];
"pyseq2.imaging.laser.Lasers" [color="black", fontcolor="black", label="{Lasers|g\lpower\lr\l|}", shape="record", style="solid"];
"pyseq2.imaging.camera.dcam.Mode" [color="black", fontcolor="black", label="{Mode|name\l|}", shape="record", style="solid"];
"pyseq2.base.instruments.Movable" [color="black", fontcolor="black", label="{Movable|HOME : ClassVar[int]\lRANGE : ClassVar[tuple[int, int]]\lSTEPS_PER_UM : ClassVar[int | float]\lpos\l|convert(p: Annotated[float, 'mm']): int\lmove(p: int): \l}", shape="record", style="solid"];
"pyseq2.imaging.fpga.z_obj.ObjCmd" [color="black", fontcolor="black", label="{ObjCmd|ARM_TRIGGER\lGET_POS\lGET_TARGET_POS\lSET_POS\lSET_TRIGGER\lSET_VELO\lSWYZ\lZ_MOVE\l|}", shape="record", style="solid"];
"pyseq2.imaging.fpga.optics.OpticCmd" [color="black", fontcolor="black", label="{OpticCmd|CLOSE_SHUTTER\lEM_FILTER_DEFAULT\lEM_FILTER_OUT\lHOME_OD\lOPEN_SHUTTER\lSET_OD\l|}", shape="record", style="solid"];
"pyseq2.imaging.fpga.optics.Optics" [color="black", fontcolor="black", label="{Optics|cmd\llock : Lock\l|green(open_: bool): \linitialize(): \lopen_shutter(): AsyncGenerator[None, None]\lred(open_: bool): \l}", shape="record", style="solid"];
"pyseq2.utils.utils.ParamChangeTimeout" [color="black", fontcolor="red", label="{ParamChangeTimeout|\l|}", shape="record", style="solid"];
"pyseq2.utils.utils.Pos" [color="black", fontcolor="black", label="{Pos|n_frames : int\ln_tiles : int\lobj_pos : Optional[int]\lx_center : int\lx_final : int\lx_initial : int\ly_center : int\ly_final : int\ly_initial : int\l|}", shape="record", style="solid"];
"pyseq2.imager.Position" [color="black", fontcolor="black", label="{Position|x : int\ly : int\lz_obj : int\lz_tilt : tuple[int, int, int]\l|}", shape="record", style="solid"];
"pyseq2.experiment.Prime" [color="black", fontcolor="black", label="{Prime|op : Literal['prime']\lreagent\lvolume : Annotated\l|}", shape="record", style="solid"];
"pyseq2.imaging.camera.dcam_types.PropTypes" [color="black", fontcolor="black", label="{PropTypes|name\l|}", shape="record", style="solid"];
"pyseq2.imaging.camera.dcam_types.PropertyDict" [color="black", fontcolor="black", label="{PropertyDict|attach_buffer_target : Literal[1, 2]\lbinning : Literal[1, 2]\lbit_per_channel : Literal[12]\lcc2_on_framegrabber : Literal[1, 2]\lcolortype : Literal[1]\lcontrast_gain : int\lexposure_time : float\limage_bit_depth_alignment : Literal[1, 2]\limage_framebytes : int\limage_height : int\limage_rowbytes : int\limage_top_offset_bytes : int\limage_width : int\linternal_frame_interval : float\linternal_frame_rate : float\linternal_line_rate : float\linternal_line_speed : float\lnumber_of_channel : int\lnumber_of_partial_area : int\lnumber_of_target_per_attachbuffer : int\lpartial_area_vpos : int\lpartial_area_vsize : int\lprimary_buffer_mode : Literal[1, 2]\lsensor_mode : Literal[1, 3, 4, 6]\lsensor_mode_line_bundle_height : int\lsubarray_hpos : int\lsubarray_hsize : int\lsubarray_mode : Literal[1, 2]\lsubarray_vpos : int\lsubarray_vsize : int\lsystem_alive : Literal[1, 2]\ltiming_cyclic_trigger_period : float\ltiming_exposure : Literal[1, 2]\ltiming_min_trigger_blanking : float\ltiming_min_trigger_interval : float\ltiming_readout_time : float\ltrigger_active : Literal[3]\ltrigger_connector : Literal[1, 2]\ltrigger_mode : Literal[1]\ltrigger_polarity : Literal[1, 2]\ltrigger_source : Literal[1, 2]\l|}", shape="record", style="solid"];
"pyseq2.experiment.Pump" [color="black", fontcolor="black", label="{Pump|op : Literal['pump']\lreagent\lvolume : Annotated\l|}", shape="record", style="solid"];
"pyseq2.experiment.Pumpable" [color="black", fontcolor="black", label="{Pumpable|flowcell : Literal[0, 1]\lport : Literal\lv_pull : Annotated\lv_push : Annotated\l|}", shape="record", style="solid"];
"pyseq2.experiment.Reagent" [color="black", fontcolor="black", label="{Reagent|name : str\lport : int\lv_prime : Annotated\lv_pull : Annotated\lv_push : Annotated\lwait : Annotated\l|port_check(cls: int, port): int\lsec_check(cls: Seconds, s): Seconds\lv_check(cls: μLpermin, v): μLpermin\l}", shape="record", style="solid"];
"pyseq2.imaging.camera.dcam.SensorMode" [color="black", fontcolor="black", label="{SensorMode|name\l|}", shape="record", style="solid"];
"pyseq2.imager.State" [color="black", fontcolor="black", label="{State|laser_power : tuple[int, int]\lpos : Position\l|}", shape="record", style="solid"];
"pyseq2.imaging.camera.dcam.Status" [color="black", fontcolor="black", label="{Status|name\l|}", shape="record", style="solid"];
"pyseq2.imaging.fpga.tdi.TDI" [color="black", fontcolor="black", label="{TDI|cmd\lencoder_pos\ln_pulses\l|prepare_for_imaging(n_px_y: int, pos: int): \lset_encoder_pos(pos: int): \l}", shape="record", style="solid"];
"pyseq2.imaging.fpga.tdi.TDICmd" [color="black", fontcolor="black", label="{TDICmd|ARM_TRIGGER\lGET_ENCODER_Y\lN_PULSES\lSET_ENCODER_Y\lSET_TRIGGER\lWHATISTHIS\l|}", shape="record", style="solid"];
"pyseq2.experiment.Temp" [color="black", fontcolor="black", label="{Temp|op : Literal['temp']\ltemp\lwait : bool\l|}", shape="record", style="solid"];
"pyseq2.imaging.fpga.z_tilt.TiltCmd" [color="black", fontcolor="black", label="{TiltCmd|CLEAR_REGISTER\lGO_HOME\lREAD_POS\lSET_CURRENT\lSET_POS\lSET_VELO\l|}", shape="record", style="solid"];
"pyseq2.imaging.camera.dcam.TwoProps" [color="black", fontcolor="black", label="{TwoProps|\l|update(to_change: Mapping[T, R])\l}", shape="record", style="solid"];
"pyseq2.base.instruments.UsesSerial" [color="black", fontcolor="black", label="{UsesSerial|com\l|initialize(): \l}", shape="record", style="solid"];
"pyseq2.experiment.Wait" [color="black", fontcolor="black", label="{Wait|op : Literal['wait']\ltemp : float\ltime : Annotated\l|}", shape="record", style="solid"];
"pyseq2.experiment.Waitable" [color="black", fontcolor="black", label="{Waitable|t : Annotated\l|}", shape="record", style="solid"];
"pyseq2.imaging.xstage.XCmd" [color="black", fontcolor="black", label="{XCmd|GET_POS\lIS_MOVING\lRESET\lSET_POS\lSET_POS_REL\l|}", shape="record", style="solid"];
"pyseq2.imaging.xstage.XStage" [color="black", fontcolor="black", label="{XStage|HOME : int\lRANGE : tuple\lSTEPS_PER_UM : float\lcmd\lcom\lis_moving\lpos\l|ainit(cls: str, port_tx): XStage\linitialize(): bool\lmove(pos: int): \l}", shape="record", style="solid"];
"pyseq2.imaging.ystage.YCmd" [color="black", fontcolor="black", label="{YCmd|BRAKE_OFF\lGAINS\lGET_POS\lGO\lGO_HOME\lIS_MOVING\lMODE_ABSOLUTE\lMOVE_DONE\lON\lRESET\lSET_POS\lSTOP\lTARGET_POS\lVELO\l|}", shape="record", style="solid"];
"pyseq2.imaging.ystage.YStage" [color="black", fontcolor="black", label="{YStage|HOME : int\lRANGE : tuple\lSTEPS_PER_UM : int\lcmd\lcom\lis_moving\lpos\l|ainit(cls: str, port_tx): YStage\linitialize(): bool\lmove(pos: int, slowly: bool): bool\lset_mode(mode: ModeName): \l}", shape="record", style="solid"];
"pyseq2.imaging.fpga.z_obj.ZObj" [color="black", fontcolor="black", label="{ZObj|HOME : int\lRANGE : tuple\lSTEPS_PER_UM : int\lcmd\lpos\l|af_arm(z_min: int, z_max: int): AsyncGenerator[Awaitable[Any], None]\linitialize(): \lmove(x: int): bool\l}", shape="record", style="solid"];
"pyseq2.imaging.fpga.z_tilt.ZTilt" [color="black", fontcolor="black", label="{ZTilt|HOME : int\lRANGE : tuple\lSTEPS_PER_UM : float\lcmd\llock : Lock\lpos\l|all_z(cmd: Callable[[int], CmdParse[Any, T]]): tuple[T, T, T]\linitialize(): \lmove(pos: int): tuple[int, int, int]\l}", shape="record", style="solid"];
"pyseq2.imaging.camera.dcam._Camera" [color="black", fontcolor="black", label="{_Camera|BUNDLE_HEIGHT : int\lIMG_WIDTH : int\lcapture_mode\lcapture_mode : SNAP\lhandle : Optional[c_void_p]\lid_ : Literal\ln_frames_taken\lproperties : Optional[DCAMDict]\lstatus\l|ainit(cls: ID, id_): _Camera\lattach(n_bundles: int, height: int): Generator[UInt16Array, None, None]\lcapture(): Generator[None, None, None]\linit_properties(handle): DCAMDict\linitialize(): \l}", shape="record", style="solid"];
"pyseq2.flowcell._FlowCell" [color="black", fontcolor="black", label="{_FlowCell|arm9chem : ARM9Chem\lid_ : Literal[0, 1]\lname : Literal['A', 'B']\lp : Optional[Pump], Pump\ltemp\lv : Optional[Valves], Valves\l|ainit(cls: Literal['A', 'B'], name: dict[SerialPorts, str], ports: ARM9Chem, arm9chem: Optional[Valves], valves: Optional[Pump], pump): _FlowCell\lflow(port: int, vol_barrel: μL): \linitialize(): \lset_temp(t): \lsps_from_μLpermin(speed): int\lsteps_from_vol(vol): int\ltemp_ok(t, tol): bool\l}", shape="record", style="solid"];
"pyseq2.imaging.camera.dcam_api.CheckedDCAMAPI" -> "pyseq2.imaging.camera.dcam_api.DCAMAPI" [arrowhead="empty", arrowtail="none"];
"pyseq2.imaging.camera.dcam_api.CheckedDCAMAPI" -> "pyseq2.imaging.camera.fake_dcam.FakeAPI" [arrowhead="empty", arrowtail="none"];
"pyseq2.imaging.camera.dcam_api.DCAMReturnedZero" -> "pyseq2.imaging.camera.dcam_api.DCAMException" [arrowhead="empty", arrowtail="none"];
"pyseq2.imaging.fpga.FPGA" -> "pyseq2.base.instruments.UsesSerial" [arrowhead="empty", arrowtail="none"];
"pyseq2.imaging.fpga.led.LED" -> "pyseq2.base.instruments.FPGAControlled" [arrowhead="empty", arrowtail="none"];
"pyseq2.imaging.fpga.optics.Optics" -> "pyseq2.base.instruments.FPGAControlled" [arrowhead="empty", arrowtail="none"];
"pyseq2.imaging.fpga.tdi.TDI" -> "pyseq2.base.instruments.FPGAControlled" [arrowhead="empty", arrowtail="none"];
"pyseq2.imaging.fpga.z_obj.ZObj" -> "pyseq2.base.instruments.FPGAControlled" [arrowhead="empty", arrowtail="none"];
"pyseq2.imaging.fpga.z_obj.ZObj" -> "pyseq2.base.instruments.Movable" [arrowhead="empty", arrowtail="none"];
"pyseq2.imaging.fpga.z_tilt.ZTilt" -> "pyseq2.base.instruments.FPGAControlled" [arrowhead="empty", arrowtail="none"];
"pyseq2.imaging.fpga.z_tilt.ZTilt" -> "pyseq2.base.instruments.Movable" [arrowhead="empty", arrowtail="none"];
"pyseq2.imaging.laser.Laser" -> "pyseq2.base.instruments.UsesSerial" [arrowhead="empty", arrowtail="none"];
"pyseq2.imaging.xstage.XStage" -> "pyseq2.base.instruments.Movable" [arrowhead="empty", arrowtail="none"];
"pyseq2.imaging.xstage.XStage" -> "pyseq2.base.instruments.UsesSerial" [arrowhead="empty", arrowtail="none"];
"pyseq2.imaging.ystage.YStage" -> "pyseq2.base.instruments.Movable" [arrowhead="empty", arrowtail="none"];
"pyseq2.imaging.ystage.YStage" -> "pyseq2.base.instruments.UsesSerial" [arrowhead="empty", arrowtail="none"];
"pyseq2.com.async_com.COM" -> "pyseq2.base.instruments.FPGAControlled" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="com", style="solid"];
"pyseq2.com.async_com.COM" -> "pyseq2.base.instruments.FPGAControlled" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="com", style="solid"];
"pyseq2.com.async_com.COM" -> "pyseq2.base.instruments.UsesSerial" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="com", style="solid"];
"pyseq2.com.async_com.COM" -> "pyseq2.imaging.fpga.FPGA" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="com", style="solid"];
"pyseq2.com.async_com.COM" -> "pyseq2.imaging.laser.Laser" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="com", style="solid"];
"pyseq2.com.async_com.COM" -> "pyseq2.imaging.xstage.XStage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="com", style="solid"];
"pyseq2.com.async_com.COM" -> "pyseq2.imaging.ystage.YStage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="com", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.FPGACmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="RESET", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.led.LEDCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SET_MODE", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.led.LEDCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SET_SWEEP_RATE", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.led.LEDCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SET_PULSE_RATE", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.optics.OpticCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="EM_FILTER_DEFAULT", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.optics.OpticCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="EM_FILTER_OUT", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.optics.OpticCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="OPEN_SHUTTER", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.optics.OpticCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="CLOSE_SHUTTER", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.optics.OpticCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="HOME_OD", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.optics.OpticCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SET_OD", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.tdi.TDICmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="GET_ENCODER_Y", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.tdi.TDICmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SET_ENCODER_Y", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.tdi.TDICmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SET_TRIGGER", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.tdi.TDICmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="WHATISTHIS", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.tdi.TDICmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ARM_TRIGGER", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.tdi.TDICmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="N_PULSES", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.z_obj.ObjCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SET_VELO", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.z_obj.ObjCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SET_POS", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.z_obj.ObjCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="GET_TARGET_POS", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.z_obj.ObjCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="GET_POS", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.z_obj.ObjCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SET_TRIGGER", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.z_obj.ObjCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ARM_TRIGGER", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.z_obj.ObjCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Z_MOVE", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.z_obj.ObjCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SWYZ", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.z_tilt.TiltCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="READ_POS", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.z_tilt.TiltCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="GO_HOME", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.z_tilt.TiltCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SET_POS", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.z_tilt.TiltCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="CLEAR_REGISTER", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.z_tilt.TiltCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SET_VELO", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.fpga.z_tilt.TiltCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SET_CURRENT", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.laser.LaserCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="GET_POWER", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.laser.LaserCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="GET_STATUS", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.laser.LaserCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="VERSION", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.xstage.XCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="IS_MOVING", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.xstage.XCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="GET_POS", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.xstage.XCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SET_POS", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.xstage.XCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="RESET", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.ystage.YCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SET_POS", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.ystage.YCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="GET_POS", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.ystage.YCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="IS_MOVING", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.ystage.YCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="MOVE_DONE", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.ystage.YCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="TARGET_POS", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.ystage.YCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="GAINS", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.ystage.YCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="VELO", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.ystage.YCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="GO", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.ystage.YCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="STOP", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.ystage.YCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ON", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.ystage.YCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="GO_HOME", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.ystage.YCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="MODE_ABSOLUTE", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.ystage.YCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="BRAKE_OFF", style="solid"];
"pyseq2.com.async_com.CmdParse" -> "pyseq2.imaging.ystage.YCmd" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="RESET", style="solid"];
"pyseq2.imaging.camera.dcam.TwoProps" -> "pyseq2.imaging.camera.dcam.Cameras" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="properties", style="solid"];
"pyseq2.imaging.camera.dcam_api.DCAM_CAPTURE_MODE" -> "pyseq2.imaging.camera.dcam._Camera" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_capture_mode", style="solid"];
"pyseq2.imaging.camera.dcam_types.DCAMParamPropertyAttr" -> "pyseq2.imaging.camera.dcam_props.DCAMProperty" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attr", style="solid"];
"pyseq2.imaging.fpga.FPGA" -> "pyseq2.imager.Imager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="fpga", style="solid"];
"pyseq2.imaging.fpga.led.LED" -> "pyseq2.imaging.fpga.FPGA" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="led", style="solid"];
"pyseq2.imaging.fpga.led.LED" -> "pyseq2.imaging.fpga.FPGA" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="led", style="solid"];
"pyseq2.imaging.fpga.led.LEDCmd" -> "pyseq2.imaging.fpga.led.LED" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cmd", style="solid"];
"pyseq2.imaging.fpga.led.LEDColor" -> "pyseq2.imaging.fpga.led.LED" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="colors", style="solid"];
"pyseq2.imaging.fpga.optics.OpticCmd" -> "pyseq2.imaging.fpga.optics.Optics" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cmd", style="solid"];
"pyseq2.imaging.fpga.optics.Optics" -> "pyseq2.imaging.fpga.FPGA" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="optics", style="solid"];
"pyseq2.imaging.fpga.optics.Optics" -> "pyseq2.imaging.fpga.FPGA" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="optics", style="solid"];
"pyseq2.imaging.fpga.tdi.TDI" -> "pyseq2.imaging.fpga.FPGA" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tdi", style="solid"];
"pyseq2.imaging.fpga.tdi.TDI" -> "pyseq2.imaging.fpga.FPGA" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tdi", style="solid"];
"pyseq2.imaging.fpga.tdi.TDICmd" -> "pyseq2.imaging.fpga.tdi.TDI" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cmd", style="solid"];
"pyseq2.imaging.fpga.z_obj.ObjCmd" -> "pyseq2.imaging.fpga.z_obj.ZObj" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cmd", style="solid"];
"pyseq2.imaging.fpga.z_obj.ZObj" -> "pyseq2.imaging.fpga.FPGA" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="z_obj", style="solid"];
"pyseq2.imaging.fpga.z_obj.ZObj" -> "pyseq2.imaging.fpga.FPGA" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="z_obj", style="solid"];
"pyseq2.imaging.fpga.z_tilt.TiltCmd" -> "pyseq2.imaging.fpga.z_tilt.ZTilt" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cmd", style="solid"];
"pyseq2.imaging.fpga.z_tilt.ZTilt" -> "pyseq2.imaging.fpga.FPGA" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="z_tilt", style="solid"];
"pyseq2.imaging.fpga.z_tilt.ZTilt" -> "pyseq2.imaging.fpga.FPGA" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="z_tilt", style="solid"];
"pyseq2.imaging.laser.Laser" -> "pyseq2.imaging.laser.Lasers" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="g", style="solid"];
"pyseq2.imaging.laser.Laser" -> "pyseq2.imaging.laser.Lasers" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="r", style="solid"];
"pyseq2.imaging.laser.LaserCmd" -> "pyseq2.imaging.laser.Laser" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cmd", style="solid"];
"pyseq2.imaging.laser.Lasers" -> "pyseq2.imager.Imager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lasers", style="solid"];
"pyseq2.imaging.xstage.XCmd" -> "pyseq2.imaging.xstage.XStage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cmd", style="solid"];
"pyseq2.imaging.xstage.XStage" -> "pyseq2.imager.Imager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x", style="solid"];
"pyseq2.imaging.ystage.YCmd" -> "pyseq2.imaging.ystage.YStage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cmd", style="solid"];
"pyseq2.imaging.ystage.YStage" -> "pyseq2.imager.Imager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="y", style="solid"];
}
