name: Test pyseq2server

on:
  push:
    branches:
      - main
  pull_request:
  release:
  workflow_dispatch:
    inputs:
      reason:
        description: Reason for the workflow dispatch.
        required: true

jobs:
  test-poetry:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        python-version: ["3.10"]
      max-parallel: 5
    env:
      FAKE_HISEQ: 1

    steps:
      - uses: actions/checkout@v2

      - name: Set up ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        run: |
          curl -sSL "https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py" | python

      - name: Update PATH
        if: ${{ matrix.os != 'windows-latest' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update PATH for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: venv-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: Install with Poetry
        run: |
          poetry install

      - name: Type check with Pyright
        run: |
          npm i -g pyright
          pyright pyseq2server/

      - name: Test with Pytest
        run: |
          poetry run pytest -rP

      - name: Upload coverage to Codecov
        if: ${{ matrix.os }} == ubuntu-latest
        uses: codecov/codecov-action@v2
        with:
          file: coverage.xml

  test-conda:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
      max-parallel: 5
    env:
      FAKE_HISEQ: 1

    steps:
      - uses: actions/checkout@v2

      - name: Cache conda
        uses: actions/cache@v2
        env:
          # Increase this value to reset cache if etc/example-environment.yml has not changed
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{
            hashFiles('environment.yml') }}

      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-version: latest
          environment-file: environment.yml
          activate-environment: pyseq
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!

      - name: Test with Pytest
        run: |
          pip install pytest pytest-cov pytest-asyncio hypothesis
          pytest -rP

  # test-tox:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       shell: bash -l {0}
  #   strategy:
  #     matrix:
  #       os: ["ubuntu-latest", "windows-latest"]
  #     max-parallel: 5
  #   env:
  #     FAKE_HISEQ: 1

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Cache conda
  #       uses: actions/cache@v2
  #       env:
  #         # Increase this value to reset cache if etc/example-environment.yml has not changed
  #         CACHE_NUMBER: 0
  #       with:
  #         path: ~/conda_pkgs_dir
  #         key: ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{
  #           hashFiles('.github/ci_env.yml') }}

  #     - uses: conda-incubator/setup-miniconda@v2
  #       with:
  #         miniforge-version: latest
  #         environment-file: .github/ci_env.yml
  #         activate-environment: pyseq
  #         use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!

  #     - name: Test with Tox
  #       run: |
  #         tox -vv
